// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: accessToken.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccessToken = `-- name: CreateAccessToken :exec
INSERT INTO "accessToken" (
  token, valid_till
) VALUES (
  $1, $2
)
`

type CreateAccessTokenParams struct {
	Token     string           `json:"token"`
	ValidTill pgtype.Timestamp `json:"valid_till"`
}

func (q *Queries) CreateAccessToken(ctx context.Context, arg CreateAccessTokenParams) error {
	_, err := q.db.Exec(ctx, createAccessToken, arg.Token, arg.ValidTill)
	return err
}

const getToken = `-- name: GetToken :one
SELECT token, valid_till FROM "accessToken"
WHERE token = $1
LIMIT 1
`

type GetTokenRow struct {
	Token     string           `json:"token"`
	ValidTill pgtype.Timestamp `json:"valid_till"`
}

func (q *Queries) GetToken(ctx context.Context, token string) (GetTokenRow, error) {
	row := q.db.QueryRow(ctx, getToken, token)
	var i GetTokenRow
	err := row.Scan(&i.Token, &i.ValidTill)
	return i, err
}
